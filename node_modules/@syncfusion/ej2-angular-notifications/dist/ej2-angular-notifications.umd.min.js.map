{"version":3,"file":"ej2-angular-notifications.umd.min.js","sources":["~/@syncfusion/ej2-angular-notifications/src/toast/buttons.directive.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast.component.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast.module.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['model'];\nlet /** @type {?} */ outputs: string[] = ['click'];\n/**\n * 'e-button' directive represent a button of angular toast \n * It must be contained in a Toast component(`ejs-toast`). \n * ```html\n * <ejs-toast id='toast' showCloseIcon=true> \n *   <e-buttons>\n *    <e-button content='Ok' isPrimary=true></e-button>\n *    <e-button content='Cancel'></e-button>\n *   </e-buttons>\n * </ejs-toast>\n * ```\n */\nexport class ButtonModelPropDirective extends ComplexBase<ButtonModelPropDirective> {\npublic directivePropList: any;\npublic click: any;\n/**\n * Specifies the Button component model properties to render the Toast action buttons. \n * \n * \\@default null\n */\npublic model: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-buttonmodelprops>e-buttonmodelprop',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ButtonModelPropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModelPropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModelPropDirective.ctorParameters;\n/** @type {?} */\nButtonModelPropDirective.prototype.directivePropList;\n/** @type {?} */\nButtonModelPropDirective.prototype.click;\n/**\n * Specifies the Button component model properties to render the Toast action buttons. \n * \n * \\@default null\n * @type {?}\n */\nButtonModelPropDirective.prototype.model;\n/** @type {?} */\nButtonModelPropDirective.prototype.viewContainerRef;\n}\n\n/**\n * ButtonModelProp Array Directive\n */\nexport class ButtonModelPropsDirective extends ArrayBase<ButtonModelPropsDirective> {\nconstructor() {\n        super('buttons');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-toast>e-buttonmodelprops',\n    queries: {\n        children: new ContentChildren(ButtonModelPropDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModelPropsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModelPropsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModelPropsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Toast } from '@syncfusion/ej2-notifications';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ButtonModelPropsDirective } from './buttons.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['animation','buttons','content','cssClass','enableHtmlSanitizer','enablePersistence','enableRtl','extendedTimeout','height','icon','locale','newestOnTop','position','progressDirection','showCloseButton','showProgressBar','target','template','timeOut','title','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeClose','beforeOpen','beforeSanitizeHtml','click','close','created','destroyed','open'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Toast Component\n * ```html\n * <ejs-toast></ejs-toast>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ToastComponent extends Toast implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n\tbeforeClose: any;\n\tbeforeOpen: any;\n\tbeforeSanitizeHtml: any;\n\tclick: any;\n\tclose: any;\n\tcreated: any;\n\tdestroyed: any;\npublic open: any;\npublic childButtons: QueryList<ButtonModelPropsDirective>;\npublic tags: string[] = ['buttons'];\n/**\n * Specifies the title to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n * \\@default null\n */\n@Template()\n    public title: any;\n/**\n * Specifies the content to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n * \\@default null\n * \\@blazortype string\n */\n@Template()\n    public content: any;\n/**\n * Specifies the HTML element/element ID as a string that can be displayed as a Toast. \n * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.\n * \n * {% codeBlock src='toast/template/index.md' %}{% endcodeBlock %}\n *     \n * \\@default null\n */\n@Template()\n    public template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childButtons;\n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-toast',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childButtons: new ContentChild(ButtonModelPropsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: ContentChild, args: ['title', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n'template': [{ type: ContentChild, args: ['template', ] },],\n};\n}\n\nfunction ToastComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nToastComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastComponent.ctorParameters;\n/** @type {?} */\nToastComponent.propDecorators;\n/** @type {?} */\nToastComponent.prototype.containerContext;\n/** @type {?} */\nToastComponent.prototype.tagObjects;\n/** @type {?} */\nToastComponent.prototype.beforeClose;\n/** @type {?} */\nToastComponent.prototype.beforeOpen;\n/** @type {?} */\nToastComponent.prototype.beforeSanitizeHtml;\n/** @type {?} */\nToastComponent.prototype.click;\n/** @type {?} */\nToastComponent.prototype.close;\n/** @type {?} */\nToastComponent.prototype.created;\n/** @type {?} */\nToastComponent.prototype.destroyed;\n/** @type {?} */\nToastComponent.prototype.open;\n/** @type {?} */\nToastComponent.prototype.childButtons;\n/** @type {?} */\nToastComponent.prototype.tags;\n/**\n * Specifies the title to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n * \\@default null\n * @type {?}\n */\nToastComponent.prototype.title;\n/**\n * Specifies the content to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n * \\@default null\n * \\@blazortype string\n * @type {?}\n */\nToastComponent.prototype.content;\n/**\n * Specifies the HTML element/element ID as a string that can be displayed as a Toast. \n * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.\n * \n * {% codeBlock src='toast/template/index.md' %}{% endcodeBlock %}\n *     \n * \\@default null\n * @type {?}\n */\nToastComponent.prototype.template;\n/** @type {?} */\nToastComponent.prototype.registerEvents;\n/** @type {?} */\nToastComponent.prototype.addTwoWay;\n/** @type {?} */\nToastComponent.prototype.ngEle;\n/** @type {?} */\nToastComponent.prototype.srenderer;\n/** @type {?} */\nToastComponent.prototype.viewContainerRef;\n/** @type {?} */\nToastComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModelPropDirective, ButtonModelPropsDirective } from './buttons.directive';\nimport { ToastComponent } from './toast.component';\n/**\n * NgModule definition for the Toast component.\n */\nexport class ToastModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ToastComponent,\n        ButtonModelPropDirective,\n        ButtonModelPropsDirective\n    ],\n    exports: [\n        ToastComponent,\n        ButtonModelPropDirective,\n        ButtonModelPropsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModelPropDirective, ButtonModelPropsDirective } from './buttons.directive';\nimport { ToastComponent } from './toast.component';\nimport { ToastModule } from './toast.module';\n/**\n * NgModule definition for the Toast component with providers.\n */\nexport class ToastAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ToastModule],\n    exports: [\n        ToastModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["input","outputs","ButtonModelPropDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","directivePropList","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","ButtonModelPropsDirective","ArrayBase","children","ContentChildren","twoWays","exports","ToastComponent","ngEle","srenderer","injector","tags","element","nativeElement","injectedModules","addTwoWay","containerContext","ComponentBase","prototype","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","tagObjects","instance","childButtons","Toast","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","ElementRef","Renderer2","Injector","propDecorators","title","content","__decorate","Template","ComponentMixins","__metadata","ToastModule","NgModule","imports","CommonModule","declarations","ToastAllModule","providers"],"mappings":"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"}
