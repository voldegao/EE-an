{"version":3,"file":"grid.component.d.ts","sources":["grid.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';\nimport { IComponentBase } from '@syncfusion/ej2-angular-base';\nimport { Grid } from '@syncfusion/ej2-grids';\nimport { ColumnsDirective } from './columns.directive';\nimport { AggregatesDirective } from './aggregates.directive';\nexport declare const inputs: string[];\nexport declare const outputs: string[];\nexport declare const twoWays: string[];\n/**\n * `ejs-grid` represents the Angular Grid Component.\n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'></ejs-grid>\n * ```\n */\nexport declare class GridComponent extends Grid implements IComponentBase {\n    private ngEle;\n    private srenderer;\n    private viewContainerRef;\n    private injector;\n    context: any;\n    tagObjects: any;\n    actionBegin: any;\n    actionComplete: any;\n    actionFailure: any;\n    batchAdd: any;\n    batchCancel: any;\n    batchDelete: any;\n    beforeAutoFill: any;\n    beforeBatchAdd: any;\n    beforeBatchDelete: any;\n    beforeBatchSave: any;\n    beforeCopy: any;\n    beforeDataBound: any;\n    beforeExcelExport: any;\n    beforeOpenAdaptiveDialog: any;\n    beforeOpenColumnChooser: any;\n    beforePaste: any;\n    beforePdfExport: any;\n    beforePrint: any;\n    beginEdit: any;\n    cellDeselected: any;\n    cellDeselecting: any;\n    cellEdit: any;\n    cellSave: any;\n    cellSaved: any;\n    cellSelected: any;\n    cellSelecting: any;\n    checkBoxChange: any;\n    columnDataStateChange: any;\n    columnDeselected: any;\n    columnDeselecting: any;\n    columnDrag: any;\n    columnDragStart: any;\n    columnDrop: any;\n    columnMenuClick: any;\n    columnMenuOpen: any;\n    columnSelected: any;\n    columnSelecting: any;\n    commandClick: any;\n    contextMenuClick: any;\n    contextMenuOpen: any;\n    created: any;\n    dataBound: any;\n    dataSourceChanged: any;\n    dataStateChange: any;\n    destroyed: any;\n    detailDataBound: any;\n    excelAggregateQueryCellInfo: any;\n    excelExportComplete: any;\n    excelHeaderQueryCellInfo: any;\n    excelQueryCellInfo: any;\n    exportDetailDataBound: any;\n    exportGroupCaption: any;\n    headerCellInfo: any;\n    keyPressed: any;\n    lazyLoadGroupCollapse: any;\n    lazyLoadGroupExpand: any;\n    load: any;\n    pdfAggregateQueryCellInfo: any;\n    pdfExportComplete: any;\n    pdfHeaderQueryCellInfo: any;\n    pdfQueryCellInfo: any;\n    printComplete: any;\n    queryCellInfo: any;\n    recordClick: any;\n    recordDoubleClick: any;\n    resizeStart: any;\n    resizeStop: any;\n    resizing: any;\n    rowDataBound: any;\n    rowDeselected: any;\n    rowDeselecting: any;\n    rowDrag: any;\n    rowDragStart: any;\n    rowDragStartHelper: any;\n    rowDrop: any;\n    rowSelected: any;\n    rowSelecting: any;\n    toolbarClick: any;\n    dataSourceChange: any;\n    childColumns: QueryList<ColumnsDirective>;\n    childAggregates: QueryList<AggregatesDirective>;\n    tags: string[];\n    /**\n     * The row template that renders customized rows from the given template.\n     * By default, Grid renders a table row for every data source item.\n     * > * It accepts either [template string](../../common/template-engine/) or HTML element ID.\n     * > * The row template must be a table row.\n     *\n     * > Check the [`Row Template`](../../grid/row/) customization.\n     *\n     */\n    rowTemplate: any;\n    /**\n     * The detail template allows you to show or hide additional information about a particular row.\n     *\n     * > It accepts either the [template string](../../common/template-engine/) or the HTML element ID.\n     *\n     *{% codeBlock src=\"grid/detail-template-api/index.ts\" %}{% endcodeBlock %}\n     *\n     */\n    detailTemplate: any;\n    /**\n     * It used to render toolbar template\n     * @default null\n     */\n    toolbarTemplate: any;\n    /**\n     * It used to render pager template\n     * @default null\n     */\n    pagerTemplate: any;\n    editSettings_template: any;\n    groupSettings_captionTemplate: any;\n    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngAfterContentChecked(): void;\n    registerEvents: (eventList: string[]) => void;\n    addTwoWay: (propList: string[]) => void;\n}\n"]}